name: Continuous Integration
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test ${{ matrix.os }} - ${{ matrix.dotnet-tfm }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Windows Tests ---
          # On Windows, we can test all target frameworks, including net48
          - os: windows-latest
            dotnet-tfm: net48
            dotnet-sdk: 8.0.x # A modern SDK is needed to run 'dotnet test' for net48
          - os: windows-latest
            dotnet-tfm: net6.0
            dotnet-sdk: 6.0.x
          - os: windows-latest
            dotnet-tfm: net7.0
            dotnet-sdk: 7.0.x
          - os: windows-latest
            dotnet-tfm: net8.0
            dotnet-sdk: 8.0.x

          # --- Linux (x64) Tests ---
          # On Linux, we only test cross-platform .NET versions
          - os: ubuntu-latest
            dotnet-tfm: net6.0
            dotnet-sdk: 6.0.x
          - os: ubuntu-latest
            dotnet-tfm: net7.0
            dotnet-sdk: 7.0.x
          - os: ubuntu-latest
            dotnet-tfm: net8.0
            dotnet-sdk: 8.0.x

          # --- Linux (ARM64) Tests ---
          # On ARM64 Linux, also only test cross-platform .NET versions
          - os: ubuntu-latest-arm64
            dotnet-tfm: net6.0
            dotnet-sdk: 6.0.x
          - os: ubuntu-latest-arm64
            dotnet-tfm: net7.0
            dotnet-sdk: 7.0.x
          - os: ubuntu-latest-arm64
            dotnet-tfm: net8.0
            dotnet-sdk: 8.0.x

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Install the specific .NET SDK required for the current target framework
      - name: Setup .NET SDK ${{ matrix.dotnet-sdk }}
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ matrix.dotnet-sdk }}

      # Run tests for the specified target framework only
      - name: Run tests for ${{ matrix.dotnet-tfm }}
        run: dotnet test --framework ${{ matrix.dotnet-tfm }} --collect:"XPlat Code Coverage"

      # Upload coverage. Each job will create a uniquely named artifact.
      - name: Upload coverage for ${{ matrix.os }} (${{ matrix.dotnet-tfm }})
        uses: actions/upload-artifact@v4
        with:
          name: Code coverage ${{ matrix.os }}-${{ matrix.dotnet-tfm }}
          path: "**/coverage.cobertura.xml"

  # --- Other jobs remain mostly the same, but 'coverage' needs adjustment ---
  coverage:
    name: Coverage
    needs: [test]
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
      # Download all coverage artifacts from the 'test' jobs
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          # This downloads all artifacts named 'Code coverage *' into subdirectories
          path: coverage-artifacts
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
        with:
          # Adjust the reports path to include all downloaded files
          reports: "coverage-artifacts/**/coverage.cobertura.xml"
          targetdir: "coverage-report"
          reporttypes: "Cobertura"
  pack:
    name: Pack
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
      - name: Create packages
        run: dotnet pack --configuration Release --output ./packages
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NuGet packages
          path: packages/*.*
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [pack]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
      - uses: actions/download-artifact@v5
        with:
          name: NuGet packages
          path: packages
      - name: Print Files in packages folder
        run: dir packages
      - name: Push packages
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      - uses: dotnet/nbgv@v0.4.2
        id: nbgv
    
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.nbgv.outputs.SemVer2 }}
          release_name: v${{ steps.nbgv.outputs.SemVer2 }}
      - name: Comment relevant issues and merge requests
        uses: apexskier/github-release-commenter@v1.3.6
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment-template: |
            This is addressed in release {release_link}.
          label-template: |
            state: released



